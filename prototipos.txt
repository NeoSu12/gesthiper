/* src/arrays_dinamicos.c */
ARRAY_DINAMICO ad_inicializa(void);
ARRAY_DINAMICO ad_inicializa_cap(int capacidade);
void ad_clean_gc(ARRAY_DINAMICO ad, ad_elimina_elems *f_eliminacao);
void ad_deep_free(ARRAY_DINAMICO ad, ad_elimina_elems *f_eliminacao);
void ad_free(ARRAY_DINAMICO ad);
int ad_get_tamanho(ARRAY_DINAMICO ad);
int ad_get_capacidade(ARRAY_DINAMICO ad);
void ad_insere_elemento(ARRAY_DINAMICO ad, void *elemento);
void ad_insere_elemento_pos(ARRAY_DINAMICO ad, int pos, void *elemento);
void ad_insere_elemento_pos_mode(ARRAY_DINAMICO ad, int pos, void *elemento, insert_mode_t i_mode);
void ad_insere_elemento_ordenado(ARRAY_DINAMICO ad, void *elemento, ad_compara_elems *f_compara, void *param);
void ad_insere_elemento_ordenado_mode(ARRAY_DINAMICO ad, void *elemento, ad_compara_elems *f_compara, insert_mode_t i_mode, void *param);
void *ad_get_elemento(ARRAY_DINAMICO ad, int pos);
int ad_get_pos_elem(ARRAY_DINAMICO ad, void *elemento, ad_compara_elems *f_compara, void *param);
int ad_existe_elemento(ARRAY_DINAMICO ad, void *elemento, ad_compara_elems *f_compara, void *param);
void ad_substitui_elemento(ARRAY_DINAMICO ad, void *novo_elemento, void *antigo_elemento, ad_compara_elems *f_compara, void *param);
void ad_substitui_elemento_pos(ARRAY_DINAMICO ad, int pos, void *novo_elemento);
void ad_remove_elemento(ARRAY_DINAMICO ad, void *elemento, ad_compara_elems *f_compara, void *param);
void ad_remove_elemento_pos(ARRAY_DINAMICO ad, int pos);
void ad_remocao_rapida_elemento(ARRAY_DINAMICO ad, int pos);
AD_PAGINADOR ad_inicializa_paginador_default(ARRAY_DINAMICO ad);
AD_PAGINADOR ad_inicializa_paginador_primeira_pag(ARRAY_DINAMICO ad, int elems_por_pag);
AD_PAGINADOR ad_inicializa_paginador_ultima_pag(ARRAY_DINAMICO ad, int elems_por_pag);
AD_PAGINADOR ad_inicializa_paginador_pag(ARRAY_DINAMICO ad, int n_pag, int elems_por_pag);
int ad_goto_pag(AD_PAGINADOR pag, int num_pag);
int ad_get_num_elems_pag(AD_PAGINADOR pag);
int ad_get_pos_inicio_pag(AD_PAGINADOR pag);
int ad_get_num_pags(AD_PAGINADOR pag);
void *ad_get_elemento_pag(AD_PAGINADOR pag, int n_elem);
void ad_set_num_elems_por_pag(AD_PAGINADOR pag, int new_elems_por_pag);
int ad_get_elems_por_pag(AD_PAGINADOR pag);
int ad_get_num_pag(AD_PAGINADOR pag);
void ad_free_pag(AD_PAGINADOR pag);
void ad_ordena(ARRAY_DINAMICO ad, ad_compara_elems *f_comparacao, void *param);
ARRAY_DINAMICO ad_inicializa_gc(int capacidade);
void ad_realloc_if_needed(ARRAY_DINAMICO ad);
void quicksort(void **elems, ad_compara_elems *f_comparacao, int n, void *param);
/* src/avl.c */
size_t avl_count(struct avl_table *tab);
struct avl_table *avl_create(avl_comparison_func *compare, void *param, struct libavl_allocator *allocator);
void *avl_find(const struct avl_table *tree, const void *item);
void **avl_probe(struct avl_table *tree, void *item);
void *avl_insert(struct avl_table *table, void *item);
void *avl_replace(struct avl_table *table, void *item);
void *avl_delete(struct avl_table *tree, const void *item);
TRAVERSER avl_t_alloc(void);
void avl_t_free(TRAVERSER it);
void avl_t_init(struct avl_traverser *trav, struct avl_table *tree);
void *avl_t_first(struct avl_traverser *trav, struct avl_table *tree);
void *avl_t_last(struct avl_traverser *trav, struct avl_table *tree);
void *avl_t_find(struct avl_traverser *trav, struct avl_table *tree, void *item);
void *avl_t_insert(struct avl_traverser *trav, struct avl_table *tree, void *item);
void *avl_t_copy(struct avl_traverser *trav, const struct avl_traverser *src);
void *avl_t_next(struct avl_traverser *trav);
void *avl_t_prev(struct avl_traverser *trav);
void *avl_t_cur(struct avl_traverser *trav);
void *avl_t_replace(struct avl_traverser *trav, void *new);
struct avl_table *avl_copy(const struct avl_table *org, avl_copy_func *copy, avl_item_func *destroy, struct libavl_allocator *allocator);
void avl_destroy(struct avl_table *tree, avl_item_func *destroy);
void *avl_malloc(struct libavl_allocator *allocator, size_t size);
void avl_free(struct libavl_allocator *allocator, void *block);
void (avl_assert_insert)(struct avl_table *table, void *item);
void *(avl_assert_delete)(struct avl_table *table, void *item);
/* src/cat_clientes.c */
CatClientes inicializa_catalogo_clientes(void);
_Bool cat_existe_cliente(CatClientes cat, char *elem);
char *cat_procura_cliente(CatClientes cat, char *elem);
void cat_insere_cliente(CatClientes cat, char *str);
void cat_remove_cliente(CatClientes cat, char *str);
int cat_total_clientes(CatClientes cat);
int cat_total_clientes_letra(CatClientes cat, char letra);
void free_catalogo_clientes(CatClientes cat);
CAT_LISTA_CLIENTES cat_lista_clientes_letra(CatClientes catalogo_clientes, char letra);
char *cat_lista_cli_get_elemento(CAT_LISTA_CLIENTES lista, int p);
int cat_lista_cli_get_num_elems(CAT_LISTA_CLIENTES lista);
void cat_free_lista_clientes(CAT_LISTA_CLIENTES lista);
CAT_PAG_LISTA_CLIENTES cat_cli_inicializa_paginador_default(CAT_LISTA_CLIENTES lista_cli);
CAT_PAG_LISTA_CLIENTES cat_cli_inicializa_paginador_primeira_pag(CAT_LISTA_CLIENTES lista_cli, int elems_por_pag);
CAT_PAG_LISTA_CLIENTES cat_cli_inicializa_paginador_ultima_pag(CAT_LISTA_CLIENTES lista_cli, int elems_por_pag);
CAT_PAG_LISTA_CLIENTES cat_cli_inicializa_paginador_pag(CAT_LISTA_CLIENTES lista_cli, int n_pag, int elems_por_pag);
int cat_cli_goto_pag(CAT_PAG_LISTA_CLIENTES pag, int num_pag);
int cat_cli_pag_get_num_elems(CAT_PAG_LISTA_CLIENTES pag);
int cat_cli_get_pos_inicio_pag(CAT_PAG_LISTA_CLIENTES pag);
int cat_cli_get_num_pags(CAT_PAG_LISTA_CLIENTES pag);
char *cat_cli_get_elemento_pag(CAT_PAG_LISTA_CLIENTES pag, int n_elem);
int cat_cli_pag_get_num_elems_pag(CAT_PAG_LISTA_CLIENTES pag);
void cat_cli_set_num_elems_por_pag(CAT_PAG_LISTA_CLIENTES pag, int new_elems_por_pag);
int cat_cli_get_elems_por_pag(CAT_PAG_LISTA_CLIENTES pag);
int cat_cli_get_num_pag(CAT_PAG_LISTA_CLIENTES pag);
void cat_cli_free_pag(CAT_PAG_LISTA_CLIENTES pag);
IT_CAT_CLIENTES inicializa_it_cat_clientes(CatClientes cat);
IT_CAT_CLIENTES inicializa_it_cat_clientes_letra(CatClientes cat, char c);
IT_CAT_CLIENTES inicializa_it_cat_clientes_primeiro(CatClientes cat);
IT_CAT_CLIENTES inicializa_it_cat_clientes_ultimo(CatClientes cat);
IT_CAT_CLIENTES inicializa_it_cat_clientes_elem(CatClientes cat, char *st);
IT_CAT_CLIENTES inicializa_it_cat_clientes_primeiro_letra(CatClientes cat, char c);
IT_CAT_CLIENTES inicializa_it_cat_clientes_ultimo_letra(CatClientes cat, char c);
char *it_cat_cliente_proximo(IT_CAT_CLIENTES it);
char *it_cat_cliente_actual(IT_CAT_CLIENTES it);
char *it_cat_cliente_anterior(IT_CAT_CLIENTES it);
char *it_cat_cliente_proximo_letra(IT_CAT_CLIENTES it);
char *it_cat_cliente_anterior_letra(IT_CAT_CLIENTES it);
void free_it_cat_cliente(IT_CAT_CLIENTES it);
int cat_compara_clientes_avl(const void *avl_a, const void *avl_b, void *avl_param);
void cat_free_cliente_avl(void *item, void *param);
void cat_free_cliente_ad(void *item);
int cat_calcula_indice_cliente(char l);
/* src/cat_produtos.c */
CatProdutos inicializa_catalogo_produtos(void);
_Bool cat_existe_produto(CatProdutos cat, char *elem);
char *cat_procura_produto(CatProdutos cat, char *elem);
void cat_insere_produto(CatProdutos cat, char *str);
void cat_remove_produto(CatProdutos cat, char *str);
int cat_total_produtos(CatProdutos cat);
int cat_total_produtos_letra(CatProdutos cat, char letra);
void free_catalogo_produtos(CatProdutos cat);
CAT_LISTA_PRODUTOS cat_lista_produtos_letra(CatProdutos catalogo_produtos, char letra);
char *cat_lista_prod_get_elemento(CAT_LISTA_PRODUTOS lista, int p);
int cat_lista_prod_get_num_elems(CAT_LISTA_PRODUTOS lista);
void cat_free_lista_produtos(CAT_LISTA_PRODUTOS lista);
CAT_PAG_LISTA_PRODUTOS cat_prod_inicializa_paginador_default(CAT_LISTA_PRODUTOS lista_prod);
CAT_PAG_LISTA_PRODUTOS cat_prod_inicializa_paginador_primeira_pag(CAT_LISTA_PRODUTOS lista_prod, int elems_por_pag);
CAT_PAG_LISTA_PRODUTOS cat_prod_inicializa_paginador_ultima_pag(CAT_LISTA_PRODUTOS lista_prod, int elems_por_pag);
CAT_PAG_LISTA_PRODUTOS cat_prod_inicializa_paginador_pag(CAT_LISTA_PRODUTOS lista_prod, int n_pag, int elems_por_pag);
void cat_prod_set_num_elems_por_pag(CAT_PAG_LISTA_PRODUTOS pag, int new_elems_por_pag);
int cat_prod_goto_pag(CAT_PAG_LISTA_PRODUTOS pag, int num_pag);
int cat_prod_pag_get_num_elems(CAT_PAG_LISTA_PRODUTOS pag);
int cat_prod_pag_get_num_elems_pag(CAT_PAG_LISTA_PRODUTOS pag);
int cat_prod_get_pos_inicio_pag(CAT_PAG_LISTA_PRODUTOS pag);
int cat_prod_get_num_pags(CAT_PAG_LISTA_PRODUTOS pag);
char *cat_prod_get_elemento_pag(CAT_PAG_LISTA_PRODUTOS pag, int n_elem);
int cat_prod_get_elems_por_pag(CAT_PAG_LISTA_PRODUTOS pag);
int cat_prod_get_num_pag(CAT_PAG_LISTA_PRODUTOS pag);
void cat_prod_free_pag(CAT_PAG_LISTA_PRODUTOS pag);
IT_CAT_PRODUTOS inicializa_it_cat_produtos(CatProdutos cat);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_letra(CatProdutos cat, char c);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_primeiro(CatProdutos cat);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_ultimo(CatProdutos cat);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_elem(CatProdutos cat, char *st);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_primeiro_letra(CatProdutos cat, char c);
IT_CAT_PRODUTOS inicializa_it_cat_produtos_ultimo_letra(CatProdutos cat, char c);
char *it_cat_produto_proximo(IT_CAT_PRODUTOS it);
char *it_cat_produto_actual(IT_CAT_PRODUTOS it);
char *it_cat_produto_anterior(IT_CAT_PRODUTOS it);
char *it_cat_produto_proximo_letra(IT_CAT_PRODUTOS it);
char *it_cat_produto_anterior_letra(IT_CAT_PRODUTOS it);
void free_it_cat_produto(IT_CAT_PRODUTOS it);
int cat_compara_produtos_avl(const void *avl_a, const void *avl_b, void *avl_param);
void cat_free_produto_avl(void *item, void *param);
void cat_free_produto_ad(void *item);
int cat_calcula_indice_produto(char l);
/* src/compra.c */
COMPRA inicializa_compra(void);
COMPRA inicializa_compra_completo(cod_cliente_t cod_cli, cod_produto_t cod_produto, preco_unit_t preco_unit, quantidade_t qtd, promo_t promo, mes_t mes);
void actualiza_compra(COMPRA compra, cod_cliente_t cod_cli, cod_produto_t cod_produto, preco_unit_t preco_unit, quantidade_t qtd, promo_t promo, mes_t mes);
void free_compra(COMPRA compra);
cod_cliente_t get_cod_cliente(COMPRA comp);
preco_unit_t get_preco_unit(COMPRA comp);
quantidade_t get_quantidade(COMPRA comp);
promo_t get_promo(COMPRA comp);
cod_produto_t get_cod_produto(COMPRA comp);
mes_t get_mes(COMPRA comp);
void set_cod_cliente(COMPRA comp, cod_cliente_t cod);
void set_preco_unit(COMPRA comp, preco_unit_t p_unit);
void set_quantidade(COMPRA comp, quantidade_t qtd);
void set_promo(COMPRA comp, promo_t promo);
void set_cod_produto(COMPRA comp, cod_produto_t prod);
void set_mes(COMPRA comp, mes_t mes);
/* src/compras.c */
Compras inicializa_compras(void);
void compras_regista_cliente(Compras compras, char *cod_cli);
void compras_regista_produto(Compras compras, char *cod_prod);
void compras_insere_compra(Compras compras, COMPRA comp);
void compras_remove_cliente(Compras compras, char *cod_cli);
void compras_remove_produto_de_cliente(Compras compras, char *cod_cli, char *cod_prod);
void compras_remove_produto(Compras compras, char *cod_prod);
int compras_num_cliente_sem_compras(Compras compras);
int compras_num_clientes_compraram_prod(Compras compras, char *cod_produto);
void free_compras(Compras compras);
char *compras_get_cod_produto_from_produto_nclientes(COMPRAS_PRODUTO_NCLIENTES p_ncli);
int compras_get_nclientes_from_produto_nclientes(COMPRAS_PRODUTO_NCLIENTES p_ncli);
char *compras_get_cod_cli_ficha(COMPRAS_FICHA_CLIENTE cliente);
_Bool compras_cliente_comprou_em_todos_os_meses(COMPRAS_FICHA_CLIENTE cliente);
int compras_total_produtos_comprados_ficha_cliente(COMPRAS_FICHA_CLIENTE cliente);
int compras_total_unidades_compradas_ficha_cliente(COMPRAS_FICHA_CLIENTE cliente);
int compras_produtos_comprados_ficha_cliente_meses(COMPRAS_FICHA_CLIENTE cliente, int mes_inf, int mes_sup);
int compras_produtos_comprados_ficha_cliente_mes(COMPRAS_FICHA_CLIENTE cliente, int mes);
int compras_produtos_comprados_cod_cliente_meses(Compras compras, char *cod_cliente, int mes_inf, int mes_sup);
int compras_produtos_comprados_cod_cliente_mes(Compras compras, char *cod_cliente, int mes);
char *compras_get_cod_prod_ficha(COMPRAS_FICHA_PRODUTO produto);
int compras_total_produtos_comprados_ficha(COMPRAS_FICHA_PRODUTO produto);
int compras_produtos_comprados_ficha_produto_meses_geral(COMPRAS_FICHA_PRODUTO produto, int mes_inf, int mes_sup, compras_campo_t campo);
int compras_produtos_comprados_ficha_produto_meses(COMPRAS_FICHA_PRODUTO produto, int mes_inf, int mes_sup);
int compras_produtos_comprados_ficha_produto_mes(COMPRAS_FICHA_PRODUTO produto, int mes);
int compras_produtos_comprados_normal_ficha_produto_meses(COMPRAS_FICHA_PRODUTO produto, int mes_inf, int mes_sup);
int compras_produtos_comprados_normal_ficha_produto_mes(COMPRAS_FICHA_PRODUTO produto, int mes);
int compras_produtos_comprados_promo_ficha_produto_meses(COMPRAS_FICHA_PRODUTO produto, int mes_inf, int mes_sup);
int compras_produtos_comprados_promo_ficha_produto_mes(COMPRAS_FICHA_PRODUTO produto, int mes);
int compras_produtos_comprados_cod_produto_meses_geral(Compras compras, char *cod_cli, char *cod_prod, int mes_inf, int mes_sup, compras_campo_t campo);
int compras_produtos_comprados_cod_produto_meses(Compras compras, char *cod_cli, char *cod_prod, int mes_inf, int mes_sup);
int compras_produtos_comprados_cod_produto_mes(Compras compras, char *cod_cli, char *cod_prod, int mes);
int compras_produtos_comprados_normal_cod_produto_meses(Compras compras, char *cod_cli, char *cod_prod, int mes_inf, int mes_sup);
int compras_produtos_comprados_normal_cod_produto_mes(Compras compras, char *cod_cli, char *cod_prod, int mes);
int compras_produtos_comprados_promo_cod_produto_meses(Compras compras, char *cod_cli, char *cod_prod, int mes_inf, int mes_sup);
int compras_produtos_comprados_promo_cod_produto_mes(Compras compras, char *cod_cli, char *cod_prod, int mes);
COMPRAS_LISTA_CLIENTES compras_lista_clientes_regulares(Compras compras);
COMPRAS_FICHA_CLIENTE compras_lista_get_fich_cli(COMPRAS_LISTA_CLIENTES lista, int p);
int compras_lista_cli_get_num_elems(COMPRAS_LISTA_CLIENTES lista);
void compras_free_lista_clientes(COMPRAS_LISTA_CLIENTES lista);
COMPRAS_LISTA_PRODUTOS compras_produtos_mais_comprados_cliente_mes(Compras compras, char *cod_cliente, int mes);
COMPRAS_LISTA_PRODUTOS compras_top_n_produtos_mais_comprados_cliente(Compras compras, char *cod_cliente, int n);
COMPRAS_FICHA_PRODUTO compras_lista_get_fich_prod(COMPRAS_LISTA_PRODUTOS lista, int p);
void compras_free_lista_produtos(COMPRAS_LISTA_PRODUTOS lista);
COMPRAS_NUM_CLIENTES_MENSAIS compras_num_clientes_por_mes(Compras compras);
int compras_get_num_clientes_mes(COMPRAS_NUM_CLIENTES_MENSAIS compras_meses, int mes);
void compras_free_num_clientes_mensais(COMPRAS_NUM_CLIENTES_MENSAIS num_cli_mensais);
COMPRAS_ASSOC_PROD_CLIENTES compras_get_associacao_produto_clientes_tipo_compra(Compras compras, char *cod_produto);
COMPRAS_CLIENTE_TIPO_COMPRA compras_get_cli_compra_from_prod_cli(COMPRAS_ASSOC_PROD_CLIENTES lista, int p);
int compras_lista_assoc_prod_clis_get_num_elems(COMPRAS_ASSOC_PROD_CLIENTES lista);
char *compras_assoc_cli_compra_get_cod_cli(COMPRAS_CLIENTE_TIPO_COMPRA cliente_compra);
char compras_assoc_cli_compra_get_tipo_compra(COMPRAS_CLIENTE_TIPO_COMPRA cliente_compra);
void compras_free_assoc_prod_clientes(COMPRAS_ASSOC_PROD_CLIENTES assoc);
COMPRAS_PAG_ASSOC_PROD_CLIENTES compras_assoc_inicializa_paginador_default(COMPRAS_ASSOC_PROD_CLIENTES lista_assoc);
COMPRAS_PAG_ASSOC_PROD_CLIENTES compras_assoc_inicializa_paginador_primeira_pag(COMPRAS_ASSOC_PROD_CLIENTES lista_assoc, int elems_por_pag);
COMPRAS_PAG_ASSOC_PROD_CLIENTES compras_assoc_inicializa_paginador_ultima_pag(COMPRAS_ASSOC_PROD_CLIENTES lista_assoc, int elems_por_pag);
COMPRAS_PAG_ASSOC_PROD_CLIENTES compras_assoc_inicializa_paginador_pag(COMPRAS_ASSOC_PROD_CLIENTES lista_assoc, int n_pag, int elems_por_pag);
int compras_lista_assoc_pag_get_num_elems(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
int compras_assoc_prod_cli_pag_get_num_elems_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
int compras_assoc_goto_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag, int num_pag);
int compras_assoc_get_pos_inicio_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
int compras_assoc_get_num_pags(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
COMPRAS_CLIENTE_TIPO_COMPRA compras_assoc_get_elemento_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag, int n_elem);
void compras_assoc_set_num_elems_por_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag, int new_elems_por_pag);
int compras_assoc_get_elems_por_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
int compras_assoc_get_num_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
void compras_assoc_free_pag(COMPRAS_PAG_ASSOC_PROD_CLIENTES pag);
COMPRAS_PAG_LISTA_CLIENTES compras_cli_inicializa_paginador_default(COMPRAS_LISTA_CLIENTES lista_cli);
COMPRAS_PAG_LISTA_CLIENTES compras_cli_inicializa_paginador_primeira_pag(COMPRAS_LISTA_CLIENTES lista_cli, int elems_por_pag);
COMPRAS_PAG_LISTA_CLIENTES compras_cli_inicializa_paginador_ultima_pag(COMPRAS_LISTA_CLIENTES lista_cli, int elems_por_pag);
COMPRAS_PAG_LISTA_CLIENTES compras_cli_inicializa_paginador_pag(COMPRAS_LISTA_CLIENTES lista_cli, int n_pag, int elems_por_pag);
int compras_cli_goto_pag(COMPRAS_PAG_LISTA_CLIENTES pag, int num_pag);
int compras_cli_pag_get_num_elems(COMPRAS_PAG_LISTA_CLIENTES pag);
int compras_cli_get_pos_inicio_pag(COMPRAS_PAG_LISTA_CLIENTES pag);
int compras_cli_get_num_pags(COMPRAS_PAG_LISTA_CLIENTES pag);
COMPRAS_FICHA_CLIENTE compras_cli_get_elemento_pag(COMPRAS_PAG_LISTA_CLIENTES pag, int n_elem);
int compras_cli_pag_get_num_elems_pag(COMPRAS_PAG_LISTA_CLIENTES pag);
void compras_cli_set_num_elems_por_pag(COMPRAS_PAG_LISTA_CLIENTES pag, int new_elems_por_pag);
int compras_cli_get_elems_por_pag(COMPRAS_PAG_LISTA_CLIENTES pag);
int compras_cli_get_num_pag(COMPRAS_PAG_LISTA_CLIENTES pag);
void compras_cli_free_pag(COMPRAS_PAG_LISTA_CLIENTES pag);
COMPRAS_PAG_LISTA_PRODUTOS compras_prod_inicializa_paginador_default(COMPRAS_LISTA_PRODUTOS lista_prod);
COMPRAS_PAG_LISTA_PRODUTOS compras_prod_inicializa_paginador_primeira_pag(COMPRAS_LISTA_PRODUTOS lista_prod, int elems_por_pag);
COMPRAS_PAG_LISTA_PRODUTOS compras_prod_inicializa_paginador_ultima_pag(COMPRAS_LISTA_PRODUTOS lista_prod, int elems_por_pag);
COMPRAS_PAG_LISTA_PRODUTOS compras_prod_inicializa_paginador_pag(COMPRAS_LISTA_PRODUTOS lista_prod, int n_pag, int elems_por_pag);
int compras_prod_goto_pag(COMPRAS_PAG_LISTA_PRODUTOS pag, int num_pag);
int compras_lista_prod_get_num_elems(COMPRAS_LISTA_PRODUTOS lista);
int compras_prod_pag_get_num_elems(COMPRAS_PAG_LISTA_PRODUTOS pag);
int compras_prod_pag_get_num_elems_pag(COMPRAS_PAG_LISTA_PRODUTOS pag);
int compras_prod_get_pos_inicio_pag(COMPRAS_PAG_LISTA_PRODUTOS pag);
int compras_prod_get_num_pags(COMPRAS_PAG_LISTA_PRODUTOS pag);
COMPRAS_FICHA_PRODUTO compras_prod_get_elemento_pag(COMPRAS_PAG_LISTA_PRODUTOS pag, int n_elem);
void compras_prod_set_num_elems_por_pag(COMPRAS_PAG_LISTA_PRODUTOS pag, int new_elems_por_pag);
int compras_prod_get_elems_por_pag(COMPRAS_PAG_LISTA_PRODUTOS pag);
int compras_prod_get_num_pag(COMPRAS_PAG_LISTA_PRODUTOS pag);
void compras_prod_free_pag(COMPRAS_PAG_LISTA_PRODUTOS pag);
IT_COMPRAS_CLIENTES inicializa_it_compras_fich_clientes(Compras compras);
IT_COMPRAS_CLIENTES inicializa_it_compras_fich_clientes_primeiro(Compras compras);
IT_COMPRAS_CLIENTES inicializa_it_compras_fich_clientes_ultimo(Compras compras);
IT_COMPRAS_CLIENTES inicializa_it_compras_fich_clientes_elem(Compras compras, char *st);
COMPRAS_FICHA_CLIENTE it_compras_fich_cliente_actual(IT_COMPRAS_CLIENTES it);
COMPRAS_FICHA_CLIENTE it_compras_fich_cliente_proximo(IT_COMPRAS_CLIENTES it);
COMPRAS_FICHA_CLIENTE it_compras_fich_cliente_anterior(IT_COMPRAS_CLIENTES it);
void free_it_compras_fich_cliente(IT_COMPRAS_CLIENTES it);
IT_COMPRAS_PRODUTOS inicializa_it_compras_fich_produtos(COMPRAS_FICHA_CLIENTE cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_fich_produtos_primeiro(COMPRAS_FICHA_CLIENTE cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_fich_produtos_ultimo(COMPRAS_FICHA_CLIENTE cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_fich_produtos_elem(COMPRAS_FICHA_CLIENTE cliente, char *st);
COMPRAS_FICHA_PRODUTO it_compras_fich_produto_actual(IT_COMPRAS_PRODUTOS it);
COMPRAS_FICHA_PRODUTO it_compras_fich_produto_proximo(IT_COMPRAS_PRODUTOS it);
COMPRAS_FICHA_PRODUTO it_compras_fich_produto_anterior(IT_COMPRAS_PRODUTOS it);
void free_it_compras_fich_produto(IT_COMPRAS_PRODUTOS it);
IT_COMPRAS_PRODUTOS inicializa_it_compras_cod_produtos(Compras compras, char *cod_cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_cod_produtos_primeiro(Compras compras, char *cod_cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_cod_produtos_ultimo(Compras compras, char *cod_cliente);
IT_COMPRAS_PRODUTOS inicializa_it_compras_cod_produtos_elem(Compras compras, char *cod_cliente, char *cod_produto);
IT_COMPRAS_PRODUTOS_NCLIENTES inicializa_it_compras_produtos_nclientes(Compras compras);
IT_COMPRAS_PRODUTOS_NCLIENTES inicializa_it_compras_produtos_nclientes_primeiro(Compras compras);
IT_COMPRAS_PRODUTOS_NCLIENTES inicializa_it_compras_produtos_nclientes_ultimo(Compras compras);
IT_COMPRAS_PRODUTOS_NCLIENTES inicializa_it_compras_produtos_nclientes_elem(Compras compras, char *st);
COMPRAS_PRODUTO_NCLIENTES it_compras_produtos_nclientes_actual(IT_COMPRAS_PRODUTOS_NCLIENTES it);
COMPRAS_PRODUTO_NCLIENTES it_compras_produtos_nclientes_proximo(IT_COMPRAS_PRODUTOS_NCLIENTES it);
COMPRAS_PRODUTO_NCLIENTES it_compras_produtos_nclientes_anterior(IT_COMPRAS_PRODUTOS_NCLIENTES it);
void free_it_compras_produtos_nclientes(IT_COMPRAS_PRODUTOS_NCLIENTES it);
COMPRAS_FICHA_PRODUTO compras_inicializa_ficha_produto(char *cod_prod);
COMPRAS_FICHA_CLIENTE compras_inicializa_ficha_cliente(char *cod_cli);
COMPRAS_CLIENTE_TIPO_COMPRA compras_inicializa_asoc_cliente_tipo_compra(char *cod_cliente, char tipo_compra);
COMPRAS_PRODUTO_NCLIENTES compras_inicializa_produto_nclientes(char *cod_prod);
COMPRAS_NUM_CLIENTES_MENSAIS compras_inicializa_num_compras_mensais(void);
COMPRAS_ASSOC_PROD_CLIENTES compras_inicializa_assoc_prod_clientes(char *cod_produto);
COMPRAS_FICHA_PRODUTO compras_clone_ficha_produto(COMPRAS_FICHA_PRODUTO src);
COMPRAS_FICHA_CLIENTE compras_clone_ficha_cliente(COMPRAS_FICHA_CLIENTE src);
COMPRAS_PRODUTO_NCLIENTES compras_clone_produto_nclientes(COMPRAS_PRODUTO_NCLIENTES src);
COMPRAS_FICHA_PRODUTO compras_codigo_produto_to_ficha(char *cod_prod);
COMPRAS_FICHA_CLIENTE compras_codigo_cliente_to_ficha(char *cod_cli);
COMPRAS_FICHA_PRODUTO compras_codigo_produto_to_ficha_noclone(char *cod_prod);
COMPRAS_FICHA_CLIENTE compras_codigo_cliente_to_ficha_noclone(char *cod_cli);
COMPRAS_PRODUTO_NCLIENTES compras_codigo_produto_to_produto_nclientes_noclone(char *cod_prod);
COMPRAS_PRODUTO_NCLIENTES compras_codigo_produto_to_produto_nclientes(char *cod_prod);
COMPRAS_FICHA_CLIENTE compras_procura_ficha_cliente_com_cod_avl(Compras compras, char *cod_cli);
COMPRAS_FICHA_PRODUTO compras_procura_ficha_produto_com_cod_avl(Compras compras, char *cod_cli, char *cod_prod);
COMPRAS_FICHA_PRODUTO compras_procura_ficha_produto_com_fichacli_avl(COMPRAS_FICHA_CLIENTE cliente, char *cod_prod);
COMPRAS_FICHA_CLIENTE compras_procura_ficha_cliente_com_cod_avl_noclone(Compras compras, char *cod_cli);
COMPRAS_FICHA_PRODUTO compras_procura_ficha_produto_com_fichacli_avl_noclone(COMPRAS_FICHA_CLIENTE cliente, char *cod_prod);
COMPRAS_PRODUTO_NCLIENTES compras_procura_produto_ncli_com_cod_prod_avl_noclone(Compras compras, char *cod_prod);
int compras_compara_fichas_cli_por_cod_cli_avl(const void *avl_a, const void *avl_b, void *param);
int compras_compara_fichas_prod_por_cod_prod_avl(const void *avl_a, const void *avl_b, void *param);
int compras_compara_produtos_nclientes_avl(const void *avl_a, const void *avl_b, void *param);
int compras_compara_fichas_prod_por_vendas_ad(void *ad_a, void *ad_b, void *param);
int compras_compara_fichas_prod_por_vendas_mes_ad(void *ad_a, void *ad_b, void *param);
void compras_free_produto_avl(void *avl_item, void *avl_param);
void compras_free_cliente_avl(void *avl_item, void *avl_param);
void compras_free_produto_nclientes_avl(void *avl_item, void *avl_param);
void compras_free_produto(COMPRAS_FICHA_PRODUTO produto);
void compras_free_cliente(COMPRAS_FICHA_CLIENTE cliente);
void compras_free_produto_nclientes(COMPRAS_PRODUTO_NCLIENTES p_ncli);
void compras_free_produto_ad(void *produto);
void compras_free_cliente_ad(void *cliente);
void compras_free_produto_nclientes_ad(void *ad_item);
void compras_free_asoc_cliente_tipo_compra_ad(void *item);
COMPRAS_FICHA_CLIENTE it_compras_fich_cliente_proximo_noclone(IT_COMPRAS_CLIENTES it);
COMPRAS_FICHA_PRODUTO it_compras_fich_produto_proximo_noclone(IT_COMPRAS_PRODUTOS it);
COMPRAS_PRODUTO_NCLIENTES it_compras_produtos_nclientes_proximo_noclone(IT_COMPRAS_PRODUTOS_NCLIENTES it);
void compras_troca_meses(int *mes1, int *mes2);
void compras_insere_assoc_cli_compra_em_assoc_prod_cli(COMPRAS_ASSOC_PROD_CLIENTES p_cli, COMPRAS_CLIENTE_TIPO_COMPRA cli_compra);
/* src/contabilidade.c */
Contabilidade inicializa_contabilidade(void);
void cont_regista_produto(Contabilidade cont, char *cod_prod);
void cont_insere_compra(Contabilidade cont, COMPRA comp);
void cont_remove_produto(Contabilidade cont, char *cod_cliente);
_Bool cont_existe_codigo_prod(Contabilidade cont, char *cod_prod);
int cont_num_prod_sem_compras(Contabilidade cont);
int cont_total_prods_comprados(Contabilidade cont);
void free_contabilidade(Contabilidade cont);
double cont_total_facturacao(Contabilidade cont);
double cont_total_facturacao_geral(Contabilidade cont, int mes_inf, int mes_sup, campo_t campo);
double cont_total_facturacao_mes(Contabilidade cont, int mes);
double cont_total_facturacao_normal_mes(Contabilidade cont, int mes);
double cont_total_facturacao_promo_mes(Contabilidade cont, int mes);
double cont_total_facturacao_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
double cont_total_facturacao_normal_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
double cont_total_facturacao_promo_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
int cont_total_compras(Contabilidade cont);
int cont_total_compras_geral(Contabilidade cont, int mes_inf, int mes_sup, campo_t campo);
int cont_total_compras_mes(Contabilidade cont, int mes);
int cont_total_compras_normais_mes(Contabilidade cont, int mes);
int cont_total_compras_promo_mes(Contabilidade cont, int mes);
int cont_total_compras_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
int cont_total_compras_normais_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
int cont_total_compras_promo_int_meses(Contabilidade cont, int mes_inf, int mes_sup);
char *cont_get_cod_prod_ficha(CONT_FICHA_PRODUTO ficha_prod);
double cont_total_fact_fich_produto(CONT_FICHA_PRODUTO ficha_prod);
double cont_total_fact_fich_produto_geral(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup, campo_t campo);
double cont_total_fact_fich_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
double cont_total_fact_fich_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
double cont_total_fact_fich_normal_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
double cont_total_fact_fich_normal_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
double cont_total_fact_fich_promo_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
double cont_total_fact_fich_promo_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
double cont_total_fact_produto(Contabilidade cont, char *cod_prod);
double cont_total_fact_produto_geral(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup, campo_t campo);
double cont_total_fact_produto_mes(Contabilidade cont, char *cod_prod, int mes);
double cont_total_fact_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
double cont_total_fact_normal_produto_mes(Contabilidade cont, char *cod_prod, int mes);
double cont_total_fact_normal_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
double cont_total_fact_promo_produto_mes(Contabilidade cont, char *cod_prod, int mes);
double cont_total_fact_promo_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
int cont_total_vendas_fich_produto(CONT_FICHA_PRODUTO ficha_prod);
int cont_total_vendas_fich_produto_geral(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup, campo_t campo);
int cont_total_vendas_fich_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
int cont_total_vendas_fich_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
int cont_total_vendas_fich_normais_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
int cont_total_vendas_fich_normais_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
int cont_total_vendas_fich_promo_produto_mes(CONT_FICHA_PRODUTO fich_prod, int mes);
int cont_total_vendas_fich_promo_produto_int_meses(CONT_FICHA_PRODUTO fich_prod, int mes_inf, int mes_sup);
int cont_total_vendas_produto(Contabilidade cont, char *cod_prod);
int cont_total_vendas_produto_geral(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup, campo_t campo);
int cont_total_vendas_produto_mes(Contabilidade cont, char *cod_prod, int mes);
int cont_total_vendas_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
int cont_total_vendas_normais_produto_mes(Contabilidade cont, char *cod_prod, int mes);
int cont_total_vendas_normais_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
int cont_total_vendas_promo_produto_mes(Contabilidade cont, char *cod_prod, int mes);
int cont_total_vendas_promo_produto_int_meses(Contabilidade cont, char *cod_prod, int mes_inf, int mes_sup);
CONT_LISTA_PRODUTOS cont_lista_prod_sem_compras(Contabilidade cont);
CONT_LISTA_PRODUTOS cont_top_produtos_comprados(Contabilidade cont, int n);
CONT_FICHA_PRODUTO cont_lista_get_fich_prod(CONT_LISTA_PRODUTOS lista, int p);
int cont_lista_get_num_elems(CONT_LISTA_PRODUTOS lista);
void cont_free_lista_produtos(CONT_LISTA_PRODUTOS lista);
CONT_PAG_LISTA_PRODUTOS cont_inicializa_paginador_default(CONT_LISTA_PRODUTOS lista_prod);
CONT_PAG_LISTA_PRODUTOS cont_inicializa_paginador_primeira_pag(CONT_LISTA_PRODUTOS lista_prod, int elems_por_pag);
CONT_PAG_LISTA_PRODUTOS cont_inicializa_paginador_ultima_pag(CONT_LISTA_PRODUTOS lista_prod, int elems_por_pag);
CONT_PAG_LISTA_PRODUTOS cont_inicializa_paginador_pag(CONT_LISTA_PRODUTOS lista_prod, int n_pag, int elems_por_pag);
int cont_goto_pag(CONT_PAG_LISTA_PRODUTOS pag, int num_pag);
int cont_pag_get_num_elems(CONT_PAG_LISTA_PRODUTOS pag);
int cont_pag_get_num_elems_pag(CONT_PAG_LISTA_PRODUTOS pag);
int cont_get_pos_inicio_pag(CONT_PAG_LISTA_PRODUTOS pag);
int cont_get_num_pags(CONT_PAG_LISTA_PRODUTOS pag);
CONT_FICHA_PRODUTO cont_get_elemento_pag(CONT_PAG_LISTA_PRODUTOS pag, int n_elem);
void cont_set_num_elems_por_pag(CONT_PAG_LISTA_PRODUTOS pag, int new_elems_por_pag);
int cont_get_elems_por_pag(CONT_PAG_LISTA_PRODUTOS pag);
int cont_get_num_pag(CONT_PAG_LISTA_PRODUTOS pag);
void cont_free_pag(CONT_PAG_LISTA_PRODUTOS pag);
IT_CONT inicializa_it_cont_fich_produtos(Contabilidade cont);
IT_CONT inicializa_it_cont_fich_produtos_primeiro(Contabilidade cont);
IT_CONT inicializa_it_cont_fich_produtos_ultimo(Contabilidade cont);
IT_CONT inicializa_it_cont_fich_produtos_elem(Contabilidade cont, char *st);
CONT_FICHA_PRODUTO it_cont_fich_produto_actual(IT_CONT it);
CONT_FICHA_PRODUTO it_cont_fich_produto_proximo(IT_CONT it);
CONT_FICHA_PRODUTO it_cont_fich_produto_anterior(IT_CONT it);
void free_it_cont_fich_prod(IT_CONT it);
CONT_FICHA_PRODUTO inicializa_ficha_produto(char *cod_prod);
CONT_FICHA_PRODUTO it_cont_fich_produto_proximo_noclone(IT_CONT it);
CONT_FICHA_PRODUTO cont_ficha_prod_clone(CONT_FICHA_PRODUTO src);
void free_ficha_prod(CONT_FICHA_PRODUTO prod);
CONT_FICHA_PRODUTO codigo_to_ficha(char *cod_prod);
CONT_FICHA_PRODUTO codigo_to_ficha_noclone(char *cod_prod);
CONT_FICHA_PRODUTO cont_procura_ficha_com_cod_avl(Contabilidade cont, char *cod_prod);
int cont_compara_ficha_por_cod_avl(const void *avl_a, const void *avl_b, void *avl_param);
int cont_compara_ficha_por_vendas_ad(void *avl_a, void *avl_b, void *param);
void cont_free_string_ad(void *item);
void free_ficha_prod_avl(void *item, void *avl_param);
void free_ficha_prod_ad(void *item);
void troca_meses(int *mes1, int *mes2);
/* src/erros.c */
void error_msg(ERRO erro, void *param);
void msg_erro_args(ERRO erro, char *nome_prog);
void msg_erro_abrir_fich(ERRO erro, void *param);
void msg_erro_flag_desconhecida(ERRO erro, void *param);
void msg_erro_nenhuma_opcao(ERRO erro, void *param);
void msg_erro_opcao_invalida(ERRO erro, void *param);
/* src/interface.c */
void interface(void);
int face_catalogos(void);
int face_contabilidade(void);
int face_compras(void);
/* src/main.c */
int main(int argc, char **argv);
int le_ficheiros(int argc, char **argv);
void le_clientes(FILE *f_cli, char *nf);
void le_produtos(FILE *f_prod, char *nf);
void le_compras(FILE *f_comp, char *nf);
int compra_valida(COMPRA compra);
void mostra_numero_codigos(void);
int compra_valida_debug(COMPRA compra);
void mostra_compra(COMPRA compra);
/* src/queries.c */
int _02_codigo_produtos_letra(void);
int _03_compras_e_fact_mensal_prod(void);
int _03_compras_e_fact_mensal_prod_old(void);
int _04_prods_nao_comprados(void);
int _05_tabela_cliente(void);
int _06_codigos_clientes_letra(void);
int _07_compras_intervalo_meses(void);
int _08_clientes_compraram_prod(void);
int _09_produtos_mais_comprados_cliente_mes(void);
int _10_clientes_regulares(void);
int _11_compras_CSV(void);
int _12_prods_mais_vendidos(void);
int _13_tres_prods_mais_comprados(void);
int _14_clientes_prods_fantasma(void);
int _05_aux_guarda_ficheiro(Compras mod_compras, char *cod_cli);
int _11_aux_cria_CSV(COMPRAS_NUM_CLIENTES_MENSAIS n_clientes_meses, int n_compras[]);
